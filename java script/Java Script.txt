基本的な記入方法
for　ブラウザ　　　document.write("〜〜〜〜");
for　コンソール　　console.log("〜〜〜〜");

アラート
alert("〜〜〜〜〜");

アラート内のメッセージ
confirm("〜〜〜〜〜");

コメント
＊ウェブ内に表示せずにJavaScritpファイル内にメモを残す場合
１行のメモ・コメント　　//
複数行のメモ・コメント　/*〜〜〜〜*/


データ型
１．数値（1 , 2 , 2.3 , 100 など）
２．文字列（internous,プログラミング、など）
３．理論値（True, False）


変数
変数の前には「var」を書く
var の後は「＿」以外の記号と数字は変数名に使えない
＊ただし、アルファベットの後ろならOK


比較演算子
a>b  は　bよりaの方が大きい
a>=b　は　aはb以上
a<=b　は　aはb以下
a==b　は　aとbは等しい
a!=b/a<>　は　aとbは等しくない


理論演算子
理論演算子| 意味 |
    &&    |  and | aとbが共にtrueの時に、処理を実行する
    ||    |  or  | aかbの少なくとも1つがtrueの場合に、実行する
　　!     |  Not | a がtrueの場合、処理は実行しない


if文の記入法
var=**
if(a==**){document.write("**");}


else文

もし○○○なら・・・XXXと処理しなさい。
この条件にマッチしない場合(=falseの場合)で、
もし△△△なら・・・□□□と処理しなさい。

で   else if   を使う

例                                         　　　画面では
var a=5;
if(a>7){document.write("A");}　　　　　　　　　　B
else if(a<8){document.write("B");}
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　と表示される。

もし○○○なら・・・XXXと処理しなさい。
それ以外の場合(=falseの場合)
□□□と処理しなさい。

で  else  を使う


例                                               画面では  
var a=20;
if(a>10){document.write("A");}                   A
else{document.write("B");}                       
                                                          と表示される。

switch文
基本的にif文とswitch文は同じ意味

例
switch(a){                                   一般的にswitch文では、caseは多用されてる。
 case 0:　　　　　　　　　　　　　　　　　　つまり複数の条件を書くことができる。
  document.write("aは0に等しい");　　　　　　caseとは、もし〜〜〜ならの部分
   break;　　　　　　　　　　　　　　　　　　breakは処理内容の後に必ず記述

 case 1:
  document.write("aは1に等しい");
   break;
}


for文
プログラミングでは、数値、数式、文字列等を繰り返し使用することがあります。
JavaScriptでは、ループ(繰り返し)処理の際に、for文とwhile文を使います。


例　　　　　　　　　　　　　　　　　　　　　書き方
for(var a=1;a<=100;a++){　　　　　　　　　　for(初期値;条件式;増減式){処理内容}
 document.write(a);
 document.write("-");                       初期値＝ループ処理の始まりの値
}　　　　　　　　　　　　　　　　　　　　 　条件式＝繰り返しを続ける為の条件
　　　　　　　　　　　　　　　　　　　　　　増減式＝増減の仕方を決める条件
2ずつ増加＝増減式 => (;a+=2)
2ずつ減少＝増減式 => (;a-=2)


*1
これまでは、『var i』をループさせ、『i』自体を表示させる処理をしました。
しかし、本来のforの”初期値”と”条件式”は、ループの回数を意味しています。
よって、初期値と条件式は、その後の処理方法とは切り離して考えるべきものです。

例
for(var a=1;a<=5;a++){document.write("#");}    これで『＃』が5回表示されます。


*2
for文でも、if文同様に
ネスト(入れ子)を作ることが可能です。

＊ネスト(入れ子)とは、if文の中にif文があるプログラム、
for文の中にfor文があるプログラムなどの事です。

例
for(var a=1;a<=10;a++){          for文の中にifを入れることで、
 if(a%2==0){　　　　　　　　　　 ループの中でif（条件）に当てはまる答えだけ
  document.write(a+"<br>");}　　 表示させる。
}　　　　　　　　　　　　　　　　さらに、<br>入れることで段落を付け加えるとこができる。
この場合{if(a%2==0)}は２で割り切れる数だけ（True）になる。

*3
while文
whileは基本的にfor文と同じ使い方

書き方                       例                             for文
初期値; 　　　　　　　　　　 var a= 0;                　　　for(var a=0;a<3;a++){
while(条件式){               while(a<3){             ＝     document.write(a);
処理内容;増減式;}            document.write(a);             }
                             a++
                             }

配列

配列とは、複数の文字や数字などを1つに格納して管理するもの。

通常                  配列
var a1="111"　　　　　var a=["111","222","333"];
var a2="222"
var a3="333"

arrayとは
格納する箱の番号は、プログラミングの性質上必ず０から始まります。

箱（[]の中）に入れられた"111","222","333"をvalue(または値)と呼ぶ。
箱の中の番号(0)(1)(2)...をkey(または添え字)と呼ぶ。
箱と値を合わせてelement(または要素)と呼ぶ。

var a1=["111","222","333"];     ＝    var a1 =new Array("111","222","333");
document.write(数字);               document.write(数字);
は同じ

格納されてる番号(key)を記述すると、格納内の特定の値(value)だけ表示することができる。
var a1 =["111","222","333"];   
document.write(a1[2]);　　　　　　　すると画面内では333と出る。

配列の指定した要素は、deleteを使って削除することができる。
var a1 =["111","222","333"]
delete a1[0];                       すると配列内の111を削除できる。
その後、111を削除した配列を表示すると,222,333が出る。
また、削除した要素を表示させるとundefined(存在しない)と出る。

一度、書き終わった配列に新たな要素を追加することができる。
それ以外に、すでに配列に格納されている値を更新することもできる。
新たな要素を付け加える　　　　　　　　要素を更新する
var a1=["111","222","333"];　　　　　 var a1=["111","222","333"];
a1[3]="444";                          a1[1]="444"
                          ||
111,222,333,444                       111,444,333

新たな要素を付け加える方法は他にもunshiftを使うことができる。
unshiftを使うと配列の先頭に、割り込むことができる。
var a1=["111","222","333"];　　　　　　000,111,222,333
a1.unshift("000")            ＝＞　　　[0] [1] [2] [3]

逆にpushを使えば配列の末尾に新たな要素を付け加えることができる。

また、shiftやpopを使ってdeleteすることもできる。
a1.shift();    a1.pop();               popは末尾を削除する際に使う。
　　　　　　　　　　　　　　　　　　　＊pushと間違えないように


配列のkey(=添え字=箱の名前)には、元々振られている数字以外に、
名前を付ける事が出来ます。

var a1={"A組":"111","B組":"222","C組":"333"};
document.write(a1["A組"]);


sliceを使って配列の一部を切り取って表示することが出来ます。
document.write(a1.slice(1,2));      ＝＞　　111
１，２の要素を切り出して表示すると０の要素しか残らないので111が表示されます。


関数
関数とは、予め何らかの処理をまとめておくことで効率よくプログラミングをする手法

例
商品名　　商品価格     tax   　送料
var a　 =　 (300   *   1.08) + 350;
var b   =   (450   *   1.08) + 350;
var c   =   (400   *   1.08) + 350;
var d   =   (350   *   1.08) + 350;

こんなの記入するのはめんどくさい。だから、関数を使う。
function totalPrice(goodsprice,tax=1.08,postage=350){
return(goodsprice*tax)+postage;
}
                                               画面では
document.write(totalPrice(300)+"<br>");        ６７４    
document.write(totalPrice(450)+"<br>");　　　　８３６
document.write(totalPrice(400)+"<br>");　　　　７８２
document.write(totalPrice(350)+"<br>");　　　　７２８
　　　　　　　　　　　　　　　　　　　　　　　　　　　　それぞれのtotla priceが出る。

書き方
function 関数名(引数１,引数２,引数３...){        または
return 戻り値　　　　　　　　　　　　　　　　　　var 関数名=function(引数・・・){
}                                                return

処理1;
処理2;                                 function => 関数を使うことの証
.　　　　　　　　　　　　　　　　　　　　関数名 => 任意の名前
.　　　　　　　　　　　　　　　　　　　　引数　 => 計算式の各要素
.　　　　　　　　　　　　　　　　　　　　戻り値 => 実際にこの関数の結果を表示させる
                                         return    (or 結果を返す)部分

